diff -r b6046301f5b1 gtk/makefile
--- a/gtk/makefile	Wed Jul 31 20:14:26 2013 +1000
+++ b/gtk/makefile	Fri Aug 02 13:46:16 2013 +0200
@@ -63,14 +63,8 @@
 endif
 
 ifndef NO_LUA
-LUA_CORE_OBJS = lapi.o lcode.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \
-		lmem.o lobject.o lopcodes.o lparser.o lstate.o lstring.o \
-		ltable.o ltm.o lundump.o lvm.o lzio.o
-
-LUA_LIB_OBJS =	lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o ltablib.o \
-		lstrlib.o loadlib.o loslib.o linit.o
-
-LUA_OBJS = LuaExtension.o $(LUA_CORE_OBJS) $(LUA_LIB_OBJS)
+LUA_OBJS = LuaExtension.o
+LUA_LIB = -llua
 
 vpath %.c ../lua/src ../lua/src/lib
 
@@ -114,7 +108,7 @@
 FilePath.o SciTEBase.o FileWorker.o Cookie.o Credits.o SciTEBuffers.o SciTEIO.o StringList.o Exporters.o StringHelpers.o \
 PropSetFile.o MultiplexExtension.o DirectorExtension.o SciTEProps.o StyleWriter.o Utf8_16.o \
 	JobQueue.o GTKMutex.o IFaceTable.o $(COMPLIB) $(LUA_OBJS)
-	$(CC) `$(CONFIGTHREADS)` -rdynamic -Wl,--as-needed -Wl,--version-script lua.vers -DGTK $^ -o $@ $(CONFIGLIB) $(LIBDL) -lm -lstdc++
+	$(CC) `$(CONFIGTHREADS)` -rdynamic -Wl,--as-needed -Wl,--version-script lua.vers -DGTK $^ -o $@ $(CONFIGLIB) $(LIBDL) -lm -lstdc++ $(LUA_LIB)
 
 # Automatically generate header dependencies with "make deps"
 include deps.mak
diff -r b6046301f5b1 src/LuaExtension.cxx
--- a/src/LuaExtension.cxx	Wed Jul 31 20:14:26 2013 +1000
+++ b/src/LuaExtension.cxx	Fri Aug 02 13:46:16 2013 +0200
@@ -25,9 +25,9 @@
 #include "SciTEKeys.h"
 
 extern "C" {
-#include "lua.h"
-#include "lualib.h"
-#include "lauxlib.h"
+#include <lua.h>
+#include <lualib.h>
+#include <lauxlib.h>
 }
 
 #if !defined(__unix__)
@@ -135,7 +135,7 @@
 }
 
 inline int absolute_index(lua_State *L, int index) {
-	return ((index < 0) && (index != LUA_REGISTRYINDEX) && (index != LUA_GLOBALSINDEX))
+	return ((index < 0) && (index != LUA_REGISTRYINDEX))
 	       ? (lua_gettop(L) + index + 1) : index;
 }
 
@@ -490,7 +490,7 @@
 
 	host->Send(pmo->pane, SCI_SETTARGETSTART, pmo->startPos, 0);
 	host->Send(pmo->pane, SCI_SETTARGETEND, pmo->endPos, 0);
-	host->Send(pmo->pane, SCI_REPLACETARGET, lua_strlen(L, 2), reinterpret_cast<sptr_t>(replacement));
+	host->Send(pmo->pane, SCI_REPLACETARGET, lua_rawlen(L, 2), reinterpret_cast<sptr_t>(replacement));
 	pmo->endPos = static_cast<int>(host->Send(pmo->pane, SCI_GETTARGETEND, 0, 0));
 	return 0;
 }
@@ -751,7 +751,7 @@
 	int nargs = lua_gettop(L);
 	const char *code = luaL_checkstring(L, 1);
 	const char *name = luaL_optstring(L, 2, code);
-	if (0 == luaL_loadbuffer(L, code, lua_strlen(L, 1), name)) {
+	if (0 == luaL_loadbuffer(L, code, lua_rawlen(L, 1), name)) {
 		lua_call(L, 0, LUA_MULTRET);
 		return lua_gettop(L) - nargs;
 	} else {
@@ -877,7 +877,7 @@
 	int loopParamCount = 2;
 
 	if (func.paramType[0] == iface_length && func.paramType[1] == iface_string) {
-		params[0] = lua_strlen(L, arg);
+		params[0] = lua_rawlen(L, arg);
 		params[1] = reinterpret_cast<sptr_t>(params[0] ? lua_tostring(L, arg) : "");
 		loopParamCount = 0;
 	} else if ((func.paramType[1] == iface_stringresult) || (func.returnType == iface_stringresult)) {
@@ -1242,6 +1242,7 @@
 }
 
 void PublishGlobalBufferData() {
+	lua_pushglobaltable(luaState);
 	lua_pushliteral(luaState, "buffer");
 	if (curBufferIndex >= 0) {
 		lua_pushliteral(luaState, "SciTE_BufferData_Array");
@@ -1269,7 +1270,8 @@
 		// for example, during startup, before any InitBuffer / ActivateBuffer
 		lua_pushnil(luaState);
 	}
-	lua_rawset(luaState, LUA_GLOBALSINDEX);
+	lua_rawset(luaState, -3);
+	lua_pop(luaState, 1);
 }
 
 static bool InitGlobalScope(bool checkProperties, bool forceReload = false) {
@@ -1290,11 +1292,12 @@
 		// copy of the initialized global environment, and uses that to re-init the scope.
 
 		if (!reload) {
+			lua_pushglobaltable(luaState);
 			lua_getfield(luaState, LUA_REGISTRYINDEX, "SciTE_InitialState");
 			if (lua_istable(luaState, -1)) {
-				clear_table(luaState, LUA_GLOBALSINDEX, true);
-				merge_table(luaState, LUA_GLOBALSINDEX, -1, true);
-				lua_pop(luaState, 1);
+				clear_table(luaState, -2, true);
+				merge_table(luaState, -2, -1, true);
+				lua_pop(luaState, 2);
 
 				// restore initial package.loaded state
 				lua_getfield(luaState, LUA_REGISTRYINDEX, "SciTE_InitialPackageState");
@@ -1307,7 +1310,7 @@
 
 				return true;
 			} else {
-				lua_pop(luaState, 1);
+				lua_pop(luaState, 2);
 			}
 		}
 
@@ -1324,7 +1327,9 @@
 
 		// Don't replace global scope using new_table, because then startup script is
 		// bound to a different copy of the globals than the extension script.
-		clear_table(luaState, LUA_GLOBALSINDEX, true);
+		lua_pushglobaltable(luaState);
+		clear_table(luaState, -1, true);
+		lua_pop(luaState, 1);
 
 		// Lua 5.1: _LOADED is in LUA_REGISTRYINDEX, so it must be cleared before
 		// loading libraries or they will not load because Lua's package system
@@ -1333,7 +1338,7 @@
 		lua_setfield(luaState, LUA_REGISTRYINDEX, "_LOADED");
 
 	} else if (!luaDisabled) {
-		luaState = lua_open();
+		luaState = luaL_newstate();
 		if (!luaState) {
 			luaDisabled = true;
 			host->Trace("> Lua: scripting engine failed to initalise\n");
@@ -1416,12 +1421,14 @@
 	lua_setglobal(luaState, "scite");
 
 	// Metatable for global namespace, to publish iface constants
+	lua_pushglobaltable(luaState);
 	if (luaL_newmetatable(luaState, "SciTE_MT_GlobalScope")) {
 		lua_pushcfunction(luaState, cf_global_metatable_index);
 		lua_setfield(luaState, -2, "__index");
 	}
-	lua_setmetatable(luaState, LUA_GLOBALSINDEX);
-
+	lua_setmetatable(luaState, -2);
+	lua_pop(luaState, 1);
+	
 	if (checkProperties && reload) {
 		CheckStartupScript();
 	}
@@ -1445,8 +1452,10 @@
 	// Clone the initial state (including metatable) in the registry so that it can be restored.
 	// (If reset==1 this will not be used, but this is a shallow copy, not very expensive, and
 	// who knows what the value of reset will be the next time InitGlobalScope runs.)
-	clone_table(luaState, LUA_GLOBALSINDEX, true);
+	lua_pushglobaltable(luaState);
+	clone_table(luaState, -1, true);
 	lua_setfield(luaState, LUA_REGISTRYINDEX, "SciTE_InitialState");
+	lua_pop(luaState, 1);
 
 	// Clone loaded packages (package.loaded) state in the registry so that it can be restored.
 	lua_getfield(luaState, LUA_REGISTRYINDEX, "_LOADED");
@@ -1606,8 +1615,9 @@
 		// Scintilla's RESearch was the other option.
 		int stackBase = lua_gettop(luaState);
 
+		lua_pushglobaltable(luaState);
 		lua_pushliteral(luaState, "string");
-		lua_rawget(luaState, LUA_GLOBALSINDEX);
+		lua_rawget(luaState, -2);
 		if (lua_istable(luaState, -1)) {
 			lua_pushliteral(luaState, "find");
 			lua_rawget(luaState, -2);
@@ -1616,14 +1626,14 @@
 				lua_pushliteral(luaState, "^%s*([%a_][%a%d_]*)%s*(.-)%s*$");
 				int status = lua_pcall(luaState, 2, 4, 0);
 				if (status==0) {
-					lua_insert(luaState, stackBase+1);
-					lua_gettable(luaState, LUA_GLOBALSINDEX);
+					lua_insert(luaState, stackBase + 2);
+					lua_gettable(luaState, stackBase + 1);
 					if (!lua_isnil(luaState, -1)) {
 						if (lua_isfunction(luaState, -1)) {
 							// Try calling it and, even if it fails, short-circuit Filerx
 							handled = true;
-							lua_insert(luaState, stackBase+1);
-							lua_settop(luaState, stackBase+2);
+							lua_insert(luaState, stackBase + 2);
+							lua_settop(luaState, stackBase + 3);
 							if (!call_function(luaState, 1, true)) {
 								host->Trace(">Lua: error occurred while processing command\n");
 							}
